{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/brains/less.js","src/brains/one.js","src/brains/two.js","src/feed_forward.js","src/frame.js","src/main.js","src/map.js","src/missiles.js","src/players.js","src/renderer.js","src/resources.js","src/universe.js","src/walls.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprltCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var Universe = require('../universe');\n\nfunction shuffle(o){\n  for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n  return o;\n}\n\nfunction Less() {\n\n};\n\nLess.prototype.loop = function(sensors) {\n  var enemiesSensors = sensors.enemies;\n\n  var order = [0, 1, 2, 3, 4, 5, 6, 7];\n  shuffle(order);\n\n  var highestEnemySensorVal = -Infinity;\n  var highestEnemySensorDir;\n  var lowestEnemySensorVal = Infinity;\n  var lowestEnemySensorDir;\n\n  for (var i = 0; i < order.length; i++) {\n    var j = order[i];\n    var value = enemiesSensors[j];\n    if (value > highestEnemySensorVal) {\n      highestEnemySensorVal = value;\n      highestEnemySensorDir = j;\n    }\n    if (value < lowestEnemySensorVal) {\n      lowestEnemySensorVal = value;\n      lowestEnemySensorDir = j;\n    }\n  }\n\n  var resourceSensors = sensors.resources;\n\n  var highestResourceSensorVal = -Infinity;\n  var highestResourceSensorDir;\n  var lowestResourceSensorVal = Infinity;\n  var lowestResourceSensorDir;\n\n  for (var i = 0; i < order.length; i++) {\n    var j = order[i];\n    var value = resourceSensors[j];\n    if (value > highestResourceSensorVal) {\n      highestResourceSensorVal = value;\n      highestResourceSensorDir = j;\n    }\n    if (value < lowestResourceSensorVal) {\n      lowestResourceSensorVal = value;\n      lowestResourceSensorDir = j;\n    }\n  }\n\n  var critical = sensors.resource <= 60;\n\n  if (highestEnemySensorVal > 0 && sensors.ammo >= 5 && !critical && !sensors.allies[highestEnemySensorDir]) {\n    if (highestEnemySensorVal > 10) {\n      return Universe.fireCommand(highestEnemySensorDir);\n    }\n    return Universe.moveCommand(highestEnemySensorDir);\n  } else if (highestResourceSensorVal > 0 && critical) {\n    return Universe.moveCommand(highestResourceSensorDir);\n  } else if (critical && highestEnemySensorVal > 0) {\n    return Universe.moveCommand(lowestEnemySensorDir);\n  } else if (highestResourceSensorVal > 0) {\n    return Universe.moveCommand(highestResourceSensorDir);\n  } else if (highestEnemySensorVal > 0 && sensors.resource > 80) {\n    return Universe.moveCommand(highestEnemySensorDir);\n  } else if (Math.random() < 0.2) {\n    return Universe.moveCommand(Math.floor(Math.random() * 8));\n  }\n};\n\nLess.prototype.mutate = function() {\n  return new Less();\n};\n\nLess.prototype.mate = function() {\n  return new Less();\n};\n\nmodule.exports = Less;\n","// Simple feed forward brain\n\nvar FeedForward = require('../feed_forward');\nvar Universe = require('../universe');\n\nfunction One(network) {\n  this._network = network || new FeedForward.HardMax([42, 42, 32, 21]);\n  this._inputs = new Float32Array([\n    0, 0, 0, 0, 0, 0, 0, 0, // Resources sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Allies sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Enemies sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Missiles sensors\n    0, 0, 0, 0,             // Wall sensors\n    0,                      // Resource\n    0,                      // Ammo\n    0, 0, 0, 0              // Feeback\n  ]);\n};\n\nOne.prototype.loop = function(sensors) {\n  var inputs = this._inputs;\n  var j = 0;\n\n  // Fill sensor inputs\n  for (var i = 0; i < 8; i++) {\n    inputs[j++] = sensors.resources[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.allies[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.enemies[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.missiles[i] / 25;\n  }\n  for (i = 0; i < 4; i++) {\n    inputs[j++] = sensors.walls[i] / 25;\n  }\n\n  inputs[j++] = sensors.resource / 100;\n  inputs[j++] = sensors.ammo / 10;\n\n  // Feed inputs to neural network\n\n  var outputs = this._network.process(inputs);\n\n  // Save output feedback for next loop\n\n  for (i = outputs.length - 4; i < outputs.length; i++) {\n    inputs[j++] = outputs[i];\n  }\n\n  // Find highest non feedback output\n\n  var maxValue = 0;\n  var maxIndex;\n\n  for (var i = 0; i < 17; i++) {\n    var value = outputs[i];\n\n    if (value > maxValue) {\n      maxValue = value;\n      maxIndex = i;\n    }\n  }\n\n  // Output 0-7 => Move\n\n  if (maxIndex < 8) {\n    return Universe.moveCommand(maxIndex);\n  }\n\n  // Output 8 -16 => Move\n\n  if (maxIndex < 16) {\n    return Universe.fireCommand(maxIndex - 8);\n  }\n\n  // If max index is 17, do nothing\n};\n\nOne.prototype.mutate = function() {\n  return new One(this._network.mutate());\n};\n\nOne.prototype.mate = function(partner) {\n  return new One(this._network.mate(partner._network));\n};\n\nmodule.exports = One;\n","// Simple feed forward brain\n\nvar FeedForward = require('../feed_forward');\nvar Universe = require('../universe');\n\nfunction Two(network) {\n  this._network = network || new FeedForward.Sigmoid([42, 42, 32, 21]);\n  this._inputs = new Float32Array([\n    0, 0, 0, 0, 0, 0, 0, 0, // Resources sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Allies sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Enemies sensors\n    0, 0, 0, 0, 0, 0, 0, 0, // Missiles sensors\n    0, 0, 0, 0,             // Wall sensors\n    0,                      // Resource\n    0,                      // Ammo\n    0, 0, 0, 0              // Feeback\n  ]);\n};\n\nTwo.prototype.loop = function(sensors) {\n  var inputs = this._inputs;\n  var j = 0;\n\n  // Fill sensor inputs\n  for (var i = 0; i < 8; i++) {\n    inputs[j++] = sensors.resources[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.allies[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.enemies[i] / 25;\n  }\n  for (i = 0; i < 8; i++) {\n    inputs[j++] = sensors.missiles[i] / 25;\n  }\n  for (i = 0; i < 4; i++) {\n    inputs[j++] = sensors.walls[i] / 25;\n  }\n\n  inputs[j++] = sensors.resource / 100;\n  inputs[j++] = sensors.ammo / 10;\n\n  // Feed inputs to neural network\n\n  var outputs = this._network.process(inputs);\n\n  // Save output feedback for next loop\n\n  for (i = outputs.length - 4; i < outputs.length; i++) {\n    inputs[j++] = outputs[i];\n  }\n\n  // Find highest non feedback output\n\n  var maxValue = 0;\n  var maxIndex;\n\n  for (var i = 0; i < 17; i++) {\n    var value = outputs[i];\n\n    if (value > maxValue) {\n      maxValue = value;\n      maxIndex = i;\n    }\n  }\n\n  // Output 0-7 => Move\n\n  if (maxIndex < 8) {\n    return Universe.moveCommand(maxIndex);\n  }\n\n  // Output 8 -16 => Move\n\n  if (maxIndex < 16) {\n    return Universe.fireCommand(maxIndex - 8);\n  }\n\n  // If max index is 17, do nothing\n};\n\nTwo.prototype.mutate = function() {\n  return new Two(this._network.mutate());\n};\n\nTwo.prototype.mate = function(partner) {\n  return new Two(this._network.mate(partner._network));\n};\n\nmodule.exports = Two;\n","// A feed forward network.\n// NOTE: If you need to save the outputs, create a copy of the result because\n// the returned subarray's buffer is reused. This is to avoid allocating\n// memory unnecessary.\n\nfunction randomWeight() {\n  return Math.random() < 0.5 ? Math.random() : -Math.random();\n}\n\nfunction FeedForward(sizes, data) {\n  this._sizes = new Float32Array(sizes);\n\n  var dataLength = 0;\n  var ioLength = 0;\n  for (var i = 0; i < sizes.length; i++) {\n    ioLength += sizes[i];\n    if (i > 0) {\n      dataLength += (sizes[i - 1] + 1) * sizes[i];\n    }\n  }\n\n  if (data) {\n    this._data = new Float32Array(data);\n  } else {\n    this._data = new Float32Array(dataLength);\n    for (var i = 0; i < dataLength; i++) {\n      this._data[i] = randomWeight();\n    }\n  }\n\n  this._io = new Float32Array(ioLength);\n  this._outputs = this._io.subarray(ioLength - sizes[sizes.length - 1]);\n}\n\nFeedForward.prototype.marshal = function() {\n  return {\n    sizes: Array.prototype.slice.call(this._sizes) ,\n    data: Array.prototype.slice.call(this._data) \n  };\n};\n\nFeedForward.prototype.mutate = function() {\n  var data = new Float32Array(this._data.length);\n  for (var i = 0; i < this._data.length; i++) {\n    data[i] = this._data[i] + (Math.random() < 0.1 ? randomWeight() : 0);\n  }\n  return new this.constructor(this._sizes, data);\n};\n\nFeedForward.prototype.mate = function(partner) {\n  var data = new Float32Array(this._data.length);\n  for (var i = 0; i < this._data.length; i++) {\n    data[i] = Math.random() < 0.5 ? this._data[i] : partner._data[i];\n  }\n  return new this.constructor(this._sizes, data);\n};\n\nFeedForward.unmarshal = function(js) {\n  return new this.constructor(js.sizes, js.data);\n};\n\nFeedForward.HardMax = function(sizes, data) {\n  FeedForward.call(this, sizes, data);\n};\n\nFeedForward.HardMax.prototype.process = function(inputs) {\n  this._io.set(inputs);\n  var dataIndex = 0, readIndex = 0, writeIndex = this._sizes[0];\n  var numInputs, numNeurons, sum, i, j, k;\n  for (i = 1; i < this._sizes.length; i++) {\n    numInputs = this._sizes[i - 1];\n    numNeurons = this._sizes[i];\n    for (j = 0; j < numNeurons; j++) {\n      sum = this._data[dataIndex++];\n      for (k = 0; k < numInputs; k++) {\n        sum += this._data[dataIndex++] * this._io[readIndex + k];\n      }\n      this._io[writeIndex + j] = Math.max(0, sum);\n    }\n    readIndex += numInputs;\n    writeIndex += numNeurons;\n  }\n  return this._outputs;\n};\n\nFeedForward.Sigmoid = function(sizes, data) {\n  FeedForward.call(this, sizes, data);\n};\n\nFeedForward.Sigmoid.prototype.process = function(inputs) {\n  this._io.set(inputs);\n  var dataIndex = 0, readIndex = 0, writeIndex = this._sizes[0];\n  var numInputs, numNeurons, sum, i, j, k;\n  for (i = 1; i < this._sizes.length; i++) {\n    numInputs = this._sizes[i - 1];\n    numNeurons = this._sizes[i];\n    for (j = 0; j < numNeurons; j++) {\n      sum = this._data[dataIndex++];\n      for (k = 0; k < numInputs; k++) {\n        sum += this._data[dataIndex++] * this._io[readIndex + k];\n      }\n      this._io[writeIndex + j] = 1 / (1 - Math.exp(-sum));\n    }\n    readIndex += numInputs;\n    writeIndex += numNeurons;\n  }\n  return this._outputs;\n};\n\nfor (var s in FeedForward.prototype) {\n  if (FeedForward.prototype.hasOwnProperty(s)) {\n    FeedForward.HardMax.prototype[s] = FeedForward.prototype[s];\n    FeedForward.Sigmoid.prototype[s] = FeedForward.prototype[s];\n  }\n}\n\nmodule.exports = FeedForward;\n","function Frame() {\n  this._informationMap = {};\n  this._removed = {};\n  this._eachDepth = 0;\n  this._total = 0;\n}\n\nFrame.prototype.read = function(x, y, data) {\n  var hash = Frame._hash(x, y);\n  if (this._removed[hash]) {\n    return;\n  }\n  return this._informationMap[hash];\n};\n\nFrame.prototype.write = function(x, y, data) {\n  var hash = Frame._hash(x, y);\n  if (typeof this._informationMap[hash] === 'undefined') {\n    this._total++;\n  }\n  delete this._removed[hash];\n  this._informationMap[hash] = data;\n};\n\nFrame.prototype.remove = function(x, y) {\n  var hash = Frame._hash(x, y);\n  if (typeof this._informationMap[hash] !== 'undefined') {\n    delete this._informationMap[hash];\n    this._removed[hash] = true;\n    this._total--;\n  }\n};\n\nFrame.prototype.each = function(func, ctx) {\n  this._eachDepth++;\n  for (var hash in this._informationMap) {\n    if (this._informationMap.hasOwnProperty(hash)) {\n      var coords = Frame._unhash(hash);\n      func.call(ctx, coords[0], coords[1], this._informationMap[hash]);\n    }\n  }\n  this._eachDepth--;\n  if (this._eachDepth < 1) {\n    this._removed = {};\n  }\n};\n\nFrame.prototype.getTotal = function() {\n  return this._total;\n};\n\nFrame._hash = function(x, y) {\n  return x.toString() + ':' + y.toString();\n};\n\nFrame._unhash = function(hash) {\n  return hash.split(':').map(function(s) {\n    return parseInt(s, 10);\n  });\n};\n\nmodule.exports = Frame;\n","var Less = require('./brains/less');\nvar map = require('./map');\nvar One = require('./brains/one');\nvar Two = require('./brains/two');\nvar Universe = require('./universe');\n\nvar canvas = document.getElementById('universe');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nvar ctx = canvas.getContext('2d');\nvar universe = new Universe(ctx, map);\n\n// Add teams\nuniverse.addTeam(\"Team HardMax\", One, 20, 5, 2000, 0.1, 0.1);\nuniverse.addTeam(\"Team Sigmoid\", Two, 20, 5, 2000, 0.1, 0.1);\n//universe.addTeam(Less, 20, 5, 2000, 1, 0);\n\n// Add random resource\nfor (i = 0; i < 40; i++) {\n  universe.addResource(50 + Math.ceil(Math.random() * 50));\n}\n\nvar lastTime;\nvar lastCycle;\nvar stats = document.getElementById('stats');\n\nuniverse.onLogic = function() {\n  var now = Date.now();\n  var cycle = universe.getCycle();\n\n  if (lastTime) {\n    var ellapsed = now - lastTime;\n    var cyclesPerSecond = 1000 * (cycle - lastCycle) / ellapsed;\n  }\n\n  lastTime = now;\n  lastCycle = cycle;\n\n  var html = '<div>C: ' + cycle + '; CPS: ' + (cyclesPerSecond ? cyclesPerSecond.toFixed(0) : '-') +  '</div>';\n\n  if (universe.getCycle() % 10 === 0 || universe.getCycle() === 1) {\n    universe.getTeams().forEach(function(team, index) {\n      html += '<div class=\"team\">';\n      html += '<div>-------------------------------</div>';\n      html += '<div>' + team.name + '</div>';\n      team.best.forEach(function(player) {\n        html += '<div>S: ' + player.score + '; ID: ' + player.id + '</div>';\n      });\n      html += '<div>-------------------------------</div>';\n      team.players.forEach(function(player) {\n        html += '<div>S: ' + player.score + '; ID: ' + player.id + '</div>';\n      });\n      html += \"</div>\";\n    });\n\n    stats.innerHTML = html;\n  }\n};\n\n// Set up user interface and events\n\nvar down, lastX, lastY;\n\nwindow.addEventListener('resize', function() {\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  universe.render();\n});\n\ndocument.getElementById('zoomOut').addEventListener('click', function() {\n  universe.setZoom(Math.round(universe.getZoom() - 1));\n  universe.render();\n});\n\ndocument.getElementById('zoomIn').addEventListener('click', function() {\n  universe.setZoom(Math.round(universe.getZoom() + 1));\n  universe.render();\n});\n\ndocument.getElementById('slower').addEventListener('click', function() {\n  universe.setCycleTimeout(universe.getCycleTimeout() + 20);\n  universe.render();\n});\n\ndocument.getElementById('faster').addEventListener('click', function() {\n  universe.setCycleTimeout(universe.getCycleTimeout() - 20);\n  universe.render();\n});\n\ncanvas.addEventListener('mousedown', function(event) {\n  event.preventDefault();\n  down = true;\n  lastX = event.pageX;\n  lastY = event.pageY;\n});\n\ndocument.body.addEventListener('mouseup', function(event) {\n  event.preventDefault();\n  down = false;\n});\n\ncanvas.addEventListener('mousemove', function(event) {\n  if (down) {\n    event.preventDefault();\n    universe.setViewX(universe.getViewX() - event.pageX + lastX);\n    universe.setViewY(universe.getViewY() - event.pageY + lastY);\n    universe.render();\n    lastX = event.pageX;\n    lastY = event.pageY;\n  }\n});\n\ncanvas.addEventListener('mousewheel', function(event) {\n  event.preventDefault();\n  var oldCellSize = Math.pow(2, universe.getZoom() + 1) * 0.5;\n  universe.setZoom(universe.getZoom() - event.deltaY / 100);\n  var newCellSize = Math.pow(2, universe.getZoom() + 1) * 0.5;\n  var cellSizeRatio = newCellSize / oldCellSize;\n  universe.setViewX(universe.getViewX() * cellSizeRatio);\n  universe.setViewY(universe.getViewY() * cellSizeRatio);\n  universe.render();\n});\n\n// Boot\n\nuniverse.start();\n\nwindow.universe = universe;\n","\nmodule.exports = [\n  'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x......................................................x................x',\n  'x......................................................x................x',\n  'x...........xxxxxxxxxxxxxxxxxx.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........x                x.........................x................x',\n  'x...........xxxxxxxxxxxxxxxxxx.........................x................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'xxxxxx..................................................................x',\n  '     x..................................................................x',\n  '     x..................................................................x',\n  '     x..................................................................x',\n  '     x....................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................x              xxxxxxxxxxxxxxxxxx.............x',\n  '     x....................x              x..............................x',\n  '     x....................x              x..............................x',\n  '     x....................x              x..............................x',\n  '     x....................x              xxxxxxxxxxxxxxxxxx.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................x                               x.............x',\n  '     x....................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.............x',\n  '     x..................................................................x',\n  '     x..................................................................x',\n  '     x..................................................................x',\n  'xxxxxx..................................................................x',\n  'x........................................xxxxxxx........................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x...........xxxxxxxxxxxxxxxxxx..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x..........................................x',\n  'x...........x                x................xxxxxxxxxxxx..............x',\n  'x...........x                x................x.........................x',\n  'x...........x                x................x.........................x',\n  'x...........x                x................x.........................x',\n  'x...........xxxxxxxxxxxxxxxxxx................x.........................x',\n  'x.............................................x.........................x',\n  'x.............................................x.........................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'x.......................................................................x',\n  'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n];\n","var Frame = require('./frame');\n\nfunction Missiles(directions, cost, initialEnergy) {\n  this._directions = directions;\n  this._cost = cost;\n  this._initialEnergy = initialEnergy;\n  this._frame = new Frame();\n}\n\nMissiles.prototype.getFrame = function() {\n  return this._frame;\n};\n\nMissiles.prototype.getCost = function() {\n  return this._cost;\n};\n\nMissiles.prototype.setWallsFrame = function(value) {\n  this._wallsFrame = value;\n};\n\nMissiles.prototype.setPlayers = function(value) {\n  this._players = value;\n};\n\nMissiles.prototype.fire = function(player, x, y, dir) {\n  var direction = this._directions[dir];\n  var startX = x + direction[0];\n  var startY = y + direction[1];\n\n  if (this._wallsFrame.read(startX, startY)) {\n    return;\n  }\n\n  var missiles = this._frame.read(startX, startY) || [];\n\n  missiles.push({\n    direction: dir,\n    energy: this._initialEnergy,\n    emitter: player\n  });\n\n  this._frame.write(startX, startY, missiles);\n};\n\nMissiles.prototype.loop = function() {\n  var previous = this._frame;\n  this._frame = new Frame();\n\n  previous.each(function(x, y, missiles) {\n    missiles.forEach(function(missile) {\n      missile.energy--;\n\n      if (missile.energy > 0) {\n        var direction = this._directions[missile.direction];\n        var destX = x + direction[0];\n        var destY = y + direction[1];\n\n        if (this._wallsFrame.read(destX, destY)) {\n          return;\n        }\n\n        var player = this._players.getFrame().read(destX, destY);\n\n        if (player) {\n          player.resource -= missile.energy;\n\n          if (missile.emitter.team === player.team) {\n            missile.emitter.score = Math.max(0, missile.emitter.score - missile.energy);\n          } else {\n            missile.emitter.score += missile.energy;\n          }\n\n          if (player.resource < 1) {\n            this._players.getFrame().remove(destX, destY);\n          } else {\n            var sensor = player.sensors.missiles;\n            sensor[(missiles.direction + 4) % 8] += missile.energy;\n            this._players.getFrame().write(destX, destY, player);\n          }   \n        } else {\n          var dest = this._frame.read(destX, destY) || [];\n          dest.push(missile);\n          this._frame.write(destX, destY, dest);\n        }\n      }\n    }.bind(this));\n  }.bind(this));\n};\n\nmodule.exports = Missiles;\n","var Frame = require('./frame');\n\nvar DIRECTIONS = [\n  [-1, 0], [0, 1], [1, -1], [1, 1],\n  [1, 0], [0, -1], [-1, 1], [-1, -1]\n];\n\nfunction Players() {\n  this._frame = new Frame();\n  this._idCount = 0;\n}\n\nPlayers.moveCommand = function(dir) {\n  return {action: 'move', direction: dir};\n};\n\nPlayers.fireCommand = function(dir) {\n  return {action: 'fire', direction: dir};\n};\n\nPlayers.prototype.getFrame = function() {\n  return this._frame;\n};\n\nPlayers.prototype.setWallsFrame = function(value) {\n  this._wallsFrame = value;\n};\n\nPlayers.prototype.setMissiles = function(value) {\n  this._missiles = value;\n};\n\nPlayers.prototype.add = function(x, y, team, brain) {\n  var id = this._idCount++;\n\n  var player = {\n    id: id,\n    team: team,\n    brain: brain,\n    resource: 100,\n    ammo: 10,\n    sensors: {\n      resources: [0, 0, 0, 0, 0, 0, 0, 0],\n      allies: [0, 0, 0, 0, 0, 0, 0, 0],\n      enemies: [0, 0, 0, 0, 0, 0, 0, 0],\n      missiles: [0, 0, 0, 0, 0, 0, 0, 0],\n      walls: [0, 0, 0, 0]\n    },\n    score: 0,\n    age: 0,\n    bestTime: 0\n  };\n\n  this._frame.write(x, y, player);\n\n  return player;\n};\n\nPlayers.prototype.move = function(x, y, dir) {\n  var player = this._frame.read(x, y);\n  var direction = DIRECTIONS[dir];\n  var newX = x + direction[0];\n  var newY = y + direction[1];\n\n  if (this._wallsFrame.read(newX, newY)) {\n    return;\n  }\n\n  var existing = this._frame.read(newX, newY);\n\n  if (!existing) {\n    this._frame.remove(x, y);\n    this._frame.write(newX, newY, player);\n  }\n};\n\nPlayers.prototype.fire = function(x, y, dir) {\n  var player = this._frame.read(x, y);\n\n  if (player.ammo < this._missiles.getCost()) {\n    return;\n  }\n\n  player.ammo -= this._missiles.getCost();\n  this._frame.write(x, y, player);\n  this._missiles.fire(player, x, y, dir, this._wallsFrame, this._frame);\n};\n\nPlayers.prototype.loop = function() {\n  this._frame.each(this._loop1, this);\n  this._frame.each(this._loop2, this);\n};\n\nPlayers.prototype._loop1 = function(x, y, player) {\n  for (var j = 0; j < DIRECTIONS.length; j++) {\n    var direction = DIRECTIONS[j];\n    for (var i = 1; i < 26; i++) {\n      var wall = this._wallsFrame.read(\n        x + i * direction[0],\n        y + i * direction[1]\n      );\n      if (wall) {\n        break;\n      }\n      foo = this._frame.read(\n        x + i * direction[0],\n        y + i * direction[1]\n      );\n      if (foo) {\n        if (foo.team === player.team) {\n          player.sensors.allies[j] += 26 - i;\n        } else {\n          player.sensors.enemies[j] += 26 - i;\n        }\n      }\n    }\n  }\n};\n\nPlayers.prototype._loop2 = function(x, y, player) {\n  player.resource--;\n  player.score++;\n  player.age++;\n\n  if (player.resource < 1 ||\n      player.age >= (1000 + Math.ceil(Math.random() * 10))) {\n    this._frame.remove(x, y);\n    return;\n  }\n\n  var sensors = player.sensors;\n  player.ammo = Math.min(10, player.ammo + 1);\n  player.sensors = {\n    resources: [0, 0, 0, 0, 0, 0, 0, 0],\n    allies: [0, 0, 0, 0, 0, 0, 0, 0],\n    enemies: [0, 0, 0, 0, 0, 0, 0, 0],\n    missiles: [0, 0, 0, 0, 0, 0, 0, 0],\n    walls: [0, 0, 0, 0]\n  };\n  this._frame.write(x, y, player);\n\n  sensors.resource = player.resource;\n  sensors.ammo = player.ammo;\n  \n  var command = player.brain.loop(sensors);\n\n  if (command) {\n    switch (command.action) {\n    case 'move':\n      this.move(x, y, command.direction);\n      break;\n    case 'fire':\n      this.fire(x, y, command.direction);\n      break;\n    }\n  }\n};\n\nmodule.exports = Players;\n","var Renderer = {};\n\nRenderer.render = function(ctx, frame, viewX, viewY, zoom, colorizer) {\n  var width = ctx.canvas.clientWidth;\n  var height = ctx.canvas.clientHeight;\n  var cellSize = Math.pow(2, zoom + 1) * 0.5;\n\n  frame.each(function(x, y, data) {\n    var mapped = Renderer.map(x, y, width, height, viewX, viewY, cellSize);\n    var visible = mapped.left <= width &&\n                  mapped.right >= 0 &&\n                  mapped.top <= height &&\n                  mapped.bottom >= 0;\n    if (visible) {\n      ctx.fillStyle = colorizer(data);  \n      ctx.fillRect(mapped.left, mapped.top, cellSize, cellSize);\n    }\n  });\n};\n\nRenderer.map = function(x, y, width, height, viewX, viewY, cellSize) {\n  var scaledX = x * cellSize;\n  var scaledY = y * cellSize;\n  var translatedX = scaledX - viewX;\n  var translatedY = scaledY - viewY;\n  var centerX = translatedX + width * 0.5;\n  var centerY = translatedY + height * 0.5;\n  return {\n    left: centerX - cellSize * 0.5,\n    top: centerY - cellSize * 0.5,\n    right: centerX + cellSize * 0.5,\n    bottom: centerY + cellSize * 0.5,\n    centerX: centerX,\n    centerY: centerY\n  };\n};\n\nmodule.exports = Renderer;\n","var Frame = require('./frame');\n\nvar DIRECTIONS = [\n  [-1, 0], [0, 1], [1, -1], [1, 1],\n  [1, 0], [0, -1], [-1, 1], [-1, -1]\n];\n\nfunction Resources() {\n  this._frame = new Frame();\n}\n\nResources.prototype.getFrame = function() {\n  return this._frame;\n};\n\nResources.prototype.setPlayersFrame = function(value) {\n  this._playersFrame = value;\n};\n\nResources.prototype.setWallsFrame = function(value) {\n  this._wallsFrame = value;\n};\n\nResources.prototype.setAddResource = function(value) {\n  this._addResource = value;\n};\n\nResources.prototype.add = function(x, y, amount) {\n  this._frame.write(x, y, amount);\n};\n\nResources.prototype.loop = function() {\n  this._playersFrame.each(this._playerLoop, this);\n};\n\nResources.prototype._playerLoop = function(x, y, player) {\n  var resource = this._frame.read(x, y);\n\n  if (resource) {\n    player.resource = Math.min(100, player.resource + resource);\n    this._frame.remove(x, y);\n    this._addResource(resource);\n    return;\n  }\n\n  for (var j = 0; j < DIRECTIONS.length; j++) {\n    var direction = DIRECTIONS[j];\n    for (var i = 1; i <= 25; i++) {\n      var wall = this._wallsFrame.read(\n        x + i * direction[0],\n        y + i * direction[1]\n      );\n      if (wall) {\n        break;\n      }\n      resource = this._frame.read(\n        x + i * direction[0],\n        y + i * direction[1]\n      );\n      if (resource) {\n        player.sensors.resources[j] += 26 - i;\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = Resources;\n","var Players = require('./players');\nvar Missiles = require('./missiles');\nvar Players = require('./players');\nvar Renderer = require('./renderer');\nvar Resources = require('./resources');\nvar Walls = require('./walls');\n\nvar DIRECTIONS = [\n  [-1, 0], [0, 1], [1, -1], [1, 1],\n  [1, 0], [0, -1], [-1, 1], [-1, -1]\n];\n\nvar STRAIGHT_DIRECTIONS = [\n  [-1, 0], [0, 1],\n  [1, 0], [0, -1]\n];\n\nvar MISSILES_INITIAL_ENERGY = 15;\nvar MISSILES_COST = 5;\n\nvar INITIAL_ZOOM = 3;\nvar INITIAL_VIEW_X = 0;\nvar INITIAL_VIEW_Y = 0;\n\nvar MAX_FRAME_RATE = 30;\nvar CYCLE_TIMEOUT = 20;\n\n// Used to colorize the walls\nfunction wallColorizer() {\n  return 'rgb(150,150,150)';\n}\n\n// Used to colorize the resources\nfunction resourceColorizer() {\n  return 'rgb(0,255,20)';\n}\n\n// Used to colorize the player's squares\nfunction playerColorizer(player) {\n  var intensity = 55 + player.resource * 2;\n  if (player.team === 0) {\n    return 'rgb(' + intensity + ',0,' + intensity + ')';\n  }\n  return 'rgb(0,' + intensity + ',' + intensity + ')';\n}\n\n// Used to colorize the missiles squares\nfunction missileColorizer(missiles) {\n  var intensity = 55;\n  for (var i = 0; i < missiles.length; i++) {\n    intensity += missiles[i].energy * 50;\n  }\n  intensity = Math.min(255, intensity);\n  return 'rgb(' + intensity + ',' + Math.round(intensity / 2) + ',0)';\n}\n\nfunction Universe(ctx, map) {\n  this._ctx = ctx;\n\n  this._zoom = INITIAL_ZOOM;\n  this._viewX = INITIAL_VIEW_X;\n  this._viewY = INITIAL_VIEW_Y;\n  this._cycleTimeout = CYCLE_TIMEOUT;\n\n  this._teams = [];\n\n  this._cycle = 0;\n  this._lastRenderTime = 0;\n\n  this._walls = new Walls();\n  this._resources = new Resources();\n  this._players = new Players();\n  this._missiles = new Missiles(\n    DIRECTIONS,\n    MISSILES_COST,\n    MISSILES_INITIAL_ENERGY\n  );\n\n  this._walls.setPlayersFrame(this._players.getFrame());\n  this._resources.setPlayersFrame(this._players.getFrame());\n  this._resources.setWallsFrame(this._walls.getFrame());\n  this._resources.setAddResource(this.addResource.bind(this));\n  this._players.setWallsFrame(this._walls.getFrame());\n  this._players.setMissiles(this._missiles);\n  this._missiles.setPlayers(this._players);\n  this._missiles.setWallsFrame(this._walls.getFrame());\n\n  this._floor = [];\n  this._initMap(map);\n}\n\nUniverse.prototype.getZoom = function() {\n  return this._zoom;\n};\n\nUniverse.prototype.setZoom = function(value) {\n  this._zoom = value;\n};\n\nUniverse.prototype.getViewX = function() {\n  return this._viewX;\n};\n\nUniverse.prototype.setViewX = function(value) {\n  this._viewX = value;\n};\n\nUniverse.prototype.getViewY = function() {\n  return this._viewY;\n};\n\nUniverse.prototype.setViewY = function(value) {\n  this._viewY = value;\n};\n\nUniverse.prototype.getCycleTimeout = function() {\n  return this._cycleTimeout;\n};\n\nUniverse.prototype.setCycleTimeout = function(value) {\n  this._cycleTimeout = Math.max(0, value);\n};\n\nUniverse.prototype.getCycle = function() {\n  return this._cycle;\n};\n\nUniverse.prototype.getTeams = function() {\n  return this._teams;\n};\n\nUniverse.prototype.getTotalPlayers = function() {\n  return this._players.getFrame().getTotal();\n};\n\nUniverse.prototype.start = function() {\n  window.requestAnimationFrame(this._mainLoop.bind(this));\n};\n\n// Force a render\nUniverse.prototype.render = function() {\n  this._ctx.clearRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\n  Renderer.render(\n    this._ctx,\n    this._walls.getFrame(),\n    this._viewX,\n    this._viewY,\n    this._zoom,\n    wallColorizer\n  );\n  Renderer.render(\n    this._ctx,\n    this._resources.getFrame(),\n    this._viewX,\n    this._viewY,\n    this._zoom,\n    resourceColorizer\n  );\n  Renderer.render(\n    this._ctx,\n    this._players.getFrame(),\n    this._viewX,\n    this._viewY,\n    this._zoom,\n    playerColorizer\n  );\n  Renderer.render(\n    this._ctx,\n    this._missiles.getFrame(),\n    this._viewX,\n    this._viewY,\n    this._zoom,\n    missileColorizer\n  );\n};\n\nUniverse.prototype.addResource = function(amount) {\n  do {\n    var rand = Math.floor(Math.random() * this._floor.length);\n    var cell = this._floor[rand];\n    var x = cell[0];\n    var y = cell[1];\n  } while(this._resources.getFrame().read(x, y) ||\n          this._players.getFrame().read(x, y))\n  this._resources.add(x, y, amount);\n};\n\nUniverse.prototype.addTeam = function(name, brain, size, bestSize, maxBestTime, newRate, mateRate) {\n  this._teams.push({\n    name: name,\n    brain: brain,\n    size: size,\n    bestSize: bestSize,\n    maxBestTime: maxBestTime,\n    newRate: newRate,\n    mateRate: mateRate,\n    score: 0,\n    players: [],\n    best: []\n  });\n};\n\nUniverse.moveCommand = Players.moveCommand;\nUniverse.fireCommand = Players.fireCommand;\n\nUniverse.prototype._initMap = function(map) {\n  var width = 0;\n  map.forEach(function(row, y) {\n    width = Math.max(width, row.length);\n  });\n\n  map.forEach(function(row, y) {\n    y -= Math.floor(map.length / 2);\n    row.split('').forEach(function(cell, x) {\n      x -= Math.floor(width / 2);\n      switch (cell) {\n      case 'x':\n        this._walls.add(x, y);\n        break;\n      case '.':\n        this._floor.push([x, y]);\n        break;\n      }\n    }.bind(this));\n  }.bind(this));\n};\n\nUniverse.prototype._logic = function() {\n  this._walls.loop(this._players.getFrame());\n  this._resources.loop();\n  for (i = 0; i < 2; i++) {\n    this._missiles.loop();\n  }\n  this._players.loop();\n\n  this._teams.forEach(function(team) {\n    team.score = 0;\n    team.players = [];\n    var cycle = this._cycle;\n    team.best = team.best.filter(function(player) {\n      return player.bestTime >= cycle - team.maxBestTime;\n    });\n  }.bind(this));\n\n  this._players.getFrame().each(function(x, y, player) {\n    var team = this._teams[player.team];\n    team.players.push(player);\n    team.score += player.score;\n    for (var i = 0; i < team.best.length; i++) {\n      if (player.id === team.best[i].id) {\n        team.best.splice(i, 1);\n        break;\n      }\n    }\n    for (i = 0; i < team.best.length; i++) {\n      if (player.score >= team.best[i].score) {\n        break;\n      }\n    }\n    player.bestTime = this._cycle;\n    team.best.splice(i, 0, player);\n    if (team.best.length > 5) {\n      team.best.pop();\n    }\n  }.bind(this));\n\n  this._teams.forEach(function(team, index) {\n    while (team.players.length < team.size) {\n      if (Math.random() < team.newRate) {\n        var brain = new team.brain();\n      } else if (team.best.length > 1) {\n        var brain1 = team.best[Math.floor(Math.random() * team.best.length)].brain;\n        do {\n          var brain2 = team.best[Math.floor(Math.random() * team.best.length)].brain;\n        } while (brain1 !== brain2)\n        if (Math.random() < team.mateRate) {\n          brain = brain1.mate(brain2);\n        } else {\n          brain = brain1.mutate();\n        }\n      }\n      this._addPlayer(index, brain || new team.brain());\n    }\n    team.players.sort(function(a, b) {\n      return b.score - a.score;\n    });\n  }.bind(this));\n\n  this._cycle++;\n  this.onLogic && this.onLogic();\n};\n\nUniverse.prototype._mainLoop = function() {\n  var now = Date.now();\n\n  if (now > this._lastRenderTime + 1000 / MAX_FRAME_RATE) {\n    this._lastRenderTime = now;\n    this.render();\n  }\n\n  this._logic();\n\n  if (this._cycleTimeout) {\n    setTimeout(\n      window.requestAnimationFrame.bind(window, this._mainLoop.bind(this))\n      , this._cycleTimeout\n    );\n  } else {\n    window.requestAnimationFrame(this._mainLoop.bind(this));\n  }\n};\n\nUniverse.prototype._addPlayer = function(team, brain) {\n  do {\n    var rand = Math.floor(Math.random() * this._floor.length);\n    var cell = this._floor[rand];\n    var x = cell[0];\n    var y = cell[1];\n  } while(this._resources.getFrame().read(x, y) ||\n          this._players.getFrame().read(x, y))\n  this._teams[team].players.push(this._players.add(x, y, team, brain));\n};\n\nmodule.exports = Universe;\n","var Frame = require('./frame');\n\nvar DIRECTIONS = [\n  [-1, 0], [0, 1],\n  [1, 0], [0, -1]\n];\n\nfunction Walls() {\n  this._frame = new Frame();\n}\n\nWalls.prototype.getFrame = function() {\n  return this._frame;\n};\n\nWalls.prototype.setPlayersFrame = function(value) {\n  this._playersFrame = value;\n};\n\nWalls.prototype.add = function(x, y) {\n  this._frame.write(x, y, true);\n};\n\nWalls.prototype.loop = function() {\n  this._playersFrame.each(this._playerLoop, this);\n};\n\nWalls.prototype._playerLoop = function(x, y, player) {\n  for (var j = 0; j < DIRECTIONS.length; j++) {\n    var direction = DIRECTIONS[j];\n    for (var i = 1; i <= 25; i++) {\n      var wall = this._frame.read(\n        x + i * direction[0],\n        y + i * direction[1]\n      );\n      if (wall) {\n        player.sensors.walls[j] += 26 - i;\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = Walls;\n"]}